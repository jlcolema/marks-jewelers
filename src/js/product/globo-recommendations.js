export default function globoRecommendations() {
  // Creating product recommendation container
  const relatedProductsContainerMarkup = `
    <div class="container container--lg padding-y-sm padding-y-lg@lg recommended-products is-hidden">
        <h2 class="merchandising-header">Other Products You'll Love</h2>
        <ul class="recommended-products__items--container"></ul>
    </div>
  `;

  // Placing product recommendation container
  document.querySelector('.product-page.container')
    .insertAdjacentHTML('afterend', relatedProductsContainerMarkup);

  // Observes original "Globo Recommendations" element generated by Globo Shopify App
  const recommendationTarget = document.querySelector('.globoRecommendationsBottom');
  const recommendationObserver = new MutationObserver(() => {
    if (recommendationTarget.querySelector('.gowl-item')) {
      recommendationObserver.disconnect();

      // Iterates through first four items found in the original "Globo Recommendations" element
      document.querySelectorAll('.gowl-item')
        .forEach(async (elem, i) => {
          if (i <= 3) {
            // Gets product ID from original "Globo Recommendations" item element
            const elemID = elem.querySelector('li')
              .getAttribute('data-product-id');

            // Gets product handle from original "Globo Recommendations" item element
            const elemLink = elem.querySelector('a')
              .getAttribute('href');

            let elemImage;
            let elemTitle;
            let elemPrice;
            let elemVariantID;
            let elemCartLink;

            // Fetches item details using the product's handle
            await fetch(`https://www.marks-jewelers.com${elemLink}.json`)
              .then(res => res.json())
              .then(data => {
                const productInfo = data.product;
                const elemVariant = productInfo.variants[0];

                // Uses main image found in item data, or a default placeholder image
                if (productInfo.image && productInfo.image.src) {
                  elemImage = productInfo.image.src;
                } else {
                  elemImage = '//cdn.shopify.com/s/files/1/0608/9752/5982/t/125/assets/placeholder.jpg?v=151154208444741004661661359290';
                }

                // Sets values from item data
                elemTitle = productInfo.title;
                elemPrice = `$${elemVariant.price}`;
                elemVariantID = elemVariant.id;
                elemCartLink = `/cart/add/${elemVariantID}`;
              });

            // Creates markup for new product recommendation element based on item data
            const newRecommendedProductMarkup = `
              <li class="recommended-products__item" data-product-id="${elemID}" data-variant-id="${elemVariantID}">
                  <a class="recommended-products__item--link" href=${elemLink}>
                      <div class="recommended-products__image" style="background-image: url(${elemImage})"></div>
                      <h3 class="recommended-products__title">${elemTitle}</h3>
                  </a>
                  <p class="recommended-products__price">From: ${elemPrice}</p>
                  <a class="btn" href=${elemCartLink}>Add to cart</a>
              </li>
            `;

            // Places markup for new product recommendation element
            document.querySelector('.recommended-products__items--container')
              .insertAdjacentHTML('beforeend', newRecommendedProductMarkup);
          }
        });

      // Displays new Product Recommendation element after item data has been populated
      document.querySelector('.recommended-products.container')
        .classList
        .remove('is-hidden');

      // Removes "Globo" recommendation elements that were generated by the app
      document.querySelector('.globoRecommendationsTop')
        .remove();
      document.querySelector('.globoRecommendationsBottom')
        .remove();
    }
  });

  recommendationObserver.observe(recommendationTarget, {
    subtree: true,
    childList: true,
  });
}
